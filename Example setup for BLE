#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

// Define UUIDs for the service and characteristic
#define SERVICE_UUID        "1234"
#define CHARACTERISTIC_UUID "5678"

BLECharacteristic *pCharacteristic;

class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    Serial.println("Device connected");
  }

  void onDisconnect(BLEServer* pServer) {
    Serial.println("Device disconnected");
  }
};

void setup() {
  Serial.begin(115200);

  // Create the BLE device
  BLEDevice::init("ESP32 BLE Server");

  // Create the BLE server
  BLEServer *pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Create the BLE service
  BLEService *pService = pServer->createService(SERVICE_UUID);

  // Create the BLE characteristic
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ |
                      BLECharacteristic::PROPERTY_WRITE |
                      BLECharacteristic::PROPERTY_NOTIFY
                    );

  // Add the descriptor for the characteristic
  pCharacteristic->addDescriptor(new BLE2902());

  // Start the service
  pService->start();

  // Start advertising
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(false);
  pAdvertising->setMinPreferred(0x06);  // sets the minimum advertising interval
  pAdvertising->setMaxPreferred(0x12);  // sets the maximum advertising interval
  BLEDevice::startAdvertising();
}

void loop() {
  // Set the value of the characteristic
  pCharacteristic->setValue("Hello, world!");

  // Notify the client
  pCharacteristic->notify();

  // Wait a second before sending the next notification
  delay(1000);
}
